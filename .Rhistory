} else{
foodIn = foodIn[-which(foodIn$day==Sys.Date()),]
}
today
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
compare
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today
macros.needed
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
compare
goal
goal=2000
min.date = Sys.Date()-10
max.date = Sys.Date()
date = seq(as.Date(min.date, "%Y-%m-%d"), as.Date(max.date, "%Y-%m-%d"), by=1)
# theurl = paste("http://www.myfitnesspal.com/reports/printable_diary/", "GoPhil04", "?from=", date[1], "&to=" , date[1], sep="")
# scrape = readHTMLTable(theurl, header=F)
ns = c("Foods" ,   "Calories" ,"Carbs" ,   "Fat"     , "Protein"  ,"Cholest" , "Sodium"  , "Sugars" ,  "Fiber"  )
theurl = paste("http://www.myfitnesspal.com/reports/printable_diary/", "MyFitnessPalAnalyzer", "?from=", min.date, "&to=" , max.date, sep="")
scrape = readHTMLTable(theurl, header=F)
## add date back in *sigh*
######## Append Date ################################################
tables = data.frame()
for(i in 1:length(scrape)){
if(ncol(scrape[[i]])==length(ns)){
day = rep(date[i],nrow(scrape[[i]]))
temp =   data.frame(scrape[[i]], day )
tables = rbind(tables, temp)
} else{
tables =tables
}
}
tables = na.omit(tables)
names(tables) = c(ns, "day")
tables$day = as.Date(tables$day, "%Y-%m-%d")
tables
foodIn = foodOut(tables)
today = foodIn[which(foodIn$day==Sys.Date()),]
today
if(nrow(today)==0){
today = rep(0, ncol(foodIn))
names(today) = names(foodIn)
foodIn = foodIn
} else{
foodIn = foodIn[-which(foodIn$day==Sys.Date()),]
}
today
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
compare
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today
today
macros.needed = round(compare[-1]/(compare$calories/goal),0)
macros.needed
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
macros.needed
toda
today
round(compare[-1]/(compare$calories/goal),0)
round(compare[-1]/(compare$calories/goal),0) - today[-1]
if(macros.needed$calories<0) print("Above Expected Calories")
foodCompare = tables[which(tables$day==compare$day),]
cfc = unique(foodCompareOut(foodCompare))
rn = cfc[,1]
cfc = cfc[,-1]
row.names(cfc) = rn
cfc
reEat1 = foodCompareOut(tables[which(tables$day == Sys.Date()),])
rn = reEat1[,1]
reEat1 = reEat1[,-1]
rnew = paste(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))],  1:length(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))]),sep="")
rg = as.character(droplevels(rn))
rg[which(  rn ==  names(which(table(droplevels(rn))>1)))] = as.character(rnew)
row.names(reEat1) = rg
reEat = rbind(reEat1, cfc[1:floor(.5*nrow(cfc)),]  )
today = colSums(reEat)
macros.needed = compare[-1] - today
macroCalories = macros.needed[,1]
macro = macros.needed[,-c(1)]
macro
reEat
compare
today
compare
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
compare
reEat1 = foodCompareOut(tables[which(tables$day == Sys.Date()),])
rn = reEat1[,1]
reEat1 = reEat1[,-1]
rnew = paste(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))],  1:length(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))]),sep="")
rg = as.character(droplevels(rn))
rg[which(  rn ==  names(which(table(droplevels(rn))>1)))] = as.character(rnew)
row.names(reEat1) = rg
reEat = rbind(reEat1, cfc[1:floor(.5*nrow(cfc)),]  )
today = colSums(reEat)
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
# macros.needed = compare[-1] - today
macroCalories = macros.needed[,1]
macro = macros.needed[,-c(1)]
macro
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
sets
mc= median(cfc$calories)
ms =  max(2,floor(macroCalories/mc))
ms = min(17, ms)
sets = combn(x=sample(1:nrow(cfc), size= ms+3,rep=T),m= ms-1)
sets
ncol(sets)
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
macros.needed
min.date = Sys.Date()-10
max.date = Sys.Date()
date = seq(as.Date(min.date, "%Y-%m-%d"), as.Date(max.date, "%Y-%m-%d"), by=1)
# theurl = paste("http://www.myfitnesspal.com/reports/printable_diary/", "GoPhil04",MyFitnessPalAnalyzer "?from=", date[1], "&to=" , date[1], sep="")
# scrape = readHTMLTable(theurl, header=F)
ns = c("Foods" ,   "Calories" ,"Carbs" ,   "Fat"     , "Protein"  ,"Cholest" , "Sodium"  , "Sugars" ,  "Fiber"  )
theurl = paste("http://www.myfitnesspal.com/reports/printable_diary/", "s2konstantine", "?from=", min.date, "&to=" , max.date, sep="")
scrape = readHTMLTable(theurl, header=F)
## add date back in *sigh*
######## Append Date ################################################
tables = data.frame()
for(i in 1:length(scrape)){
if(ncol(scrape[[i]])==length(ns)){
day = rep(date[i],nrow(scrape[[i]]))
temp =   data.frame(scrape[[i]], day )
tables = rbind(tables, temp)
} else{
tables =tables
}
}
tables = na.omit(tables)
names(tables) = c(ns, "day")
tables$day = as.Date(tables$day, "%Y-%m-%d")
tables
foodIn = foodOut(tables)
today = foodIn[which(foodIn$day==Sys.Date()),]
today
if(nrow(today)==0){
today = rep(0, ncol(foodIn))
names(today) = names(foodIn)
foodIn = foodIn
} else{
foodIn = foodIn[-which(foodIn$day==Sys.Date()),]
}
today
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
compare
goal = 2000
foodIn = foodOut(tables)
# compare to similar day in query
today = foodIn[which(foodIn$day==Sys.Date()),]
if(nrow(today)==0){
today = rep(0, ncol(foodIn))
names(today) = names(foodIn)
foodIn = foodIn
} else{
foodIn = foodIn[-which(foodIn$day==Sys.Date()),]
}
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
compare
goal
goal
compare$calories/goal
macros.needed = round(compare[-1]*(compare$calories/goal),0) - today[-1]
source('~/.active-rstudio-document', echo=TRUE)
macros.needed
compare
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
today
round(compare[-1]/(compare$calories/goal),0)
reEat1 = cfc[1:floor(.5*nrow(cfc)),]
reEat1
foodCompare = tables[which(tables$day==compare$day),]
#cfc = foodCompareOut(foodCompare)
#macro = macros.needed[,-c(1:2)]
cfc = unique(foodCompareOut(foodCompare))
rn = cfc[,1]
cfc = cfc[,-1]
row.names(cfc) = rn
cfc
reEat1 = cfc[1:floor(.5*nrow(cfc)),]
today = colSums(reEat)
today
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
toay
today
reEat1 = cfc[1:floor(.5*nrow(cfc)),]
today = colSums(reEat)
today
reEat1
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
reEat1 = cfc[1:floor(.5*nrow(cfc)),]
today = colSums(reEat1)
today
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
compare
round(compare[-1]/(compare$calories/goal),0)
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
round(compare[-1]/(compare$calories/goal),0)
today = colSums(reEat1)
today
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
round(compare[-1]/(compare$calories/goal),0)
round(compare[-1]/(compare$calories/goal),0) - today[-1]
today
round(compare[-1]/(compare$calories/goal),0) - today[-1]
round(compare[-1]/(compare$calories/goal),0)
round(compare[-1]/(compare$calories/goal),0)[-1] - today[-1]
today = foodIn[which(foodIn$day==Sys.Date()),]
if(nrow(today)==0){
today = rep(0, ncol(foodIn))
names(today) = names(foodIn)
foodIn = foodIn
} else{
foodIn = foodIn[-which(foodIn$day==Sys.Date()),]
}
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
round(compare[-1]/(compare$calories/goal),0)
today[-1]
reEat1 = foodCompareOut(tables[which(tables$day == Sys.Date()),])
rn = reEat1[,1]
reEat1 = reEat1[,-1]
rnew = paste(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))],  1:length(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))]),sep="")
rg = as.character(droplevels(rn))
rg[which(  rn ==  names(which(table(droplevels(rn))>1)))] = as.character(rnew)
row.names(reEat1) = rg
reEat = rbind(reEat1, cfc[1:floor(.5*nrow(cfc)),]  )
today = colSums(reEat)
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
foodIn = foodOut(tables)
# compare to similar day in query
today = foodIn[which(foodIn$day==Sys.Date()),]
if(nrow(today)==0){
today = rep(0, ncol(foodIn))
names(today) = names(foodIn)
foodIn = foodIn
} else{
foodIn = foodIn[-which(foodIn$day==Sys.Date()),]
}
compare = foodIn[which.min(abs(foodIn$calories - goal)),]
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
#macros.needed = compare - today
if(macros.needed$calories<0) print("Above Expected Calories")
foodCompare = tables[which(tables$day==compare$day),]
#cfc = foodCompareOut(foodCompare)
#macro = macros.needed[,-c(1:2)]
cfc = unique(foodCompareOut(foodCompare))
rn = cfc[,1]
cfc = cfc[,-1]
row.names(cfc) = rn
cfc
today
round(compare[-1]/(compare$calories/goal),0)
today[-1]
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today[-1]
macros.needed
foodCompare = tables[which(tables$day==compare$day),]
#cfc = foodCompareOut(foodCompare)
#macro = macros.needed[,-c(1:2)]
cfc = unique(foodCompareOut(foodCompare))
rn = cfc[,1]
cfc = cfc[,-1]
row.names(cfc) = rn
today
reEat1 = cfc[1:floor(.5*nrow(cfc)),]
today = colSums(reEat1)
reEat1
today
round(compare[-1]/(compare$calories/goal),0)[-1]
today[-1]
macros.needed = round(compare[-1]/(compare$calories/goal),0)[-1] - today[-1]
macros.needed
today
reEat1 = cfc[1:floor(.5*nrow(cfc)),]
today = colSums(reEat1)
today
round(compare[-1]/(compare$calories/goal),0)
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today
macroCalories = macros.needed[,1]
macro = macros.needed[,-c(1)]
macroCalories
macro
reEat1 = foodCompareOut(tables[which(tables$day == Sys.Date()),])
rn = reEat1[,1]
reEat1 = reEat1[,-1]
rnew = paste(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))],  1:length(rn[which(  rn ==  names(which(table(droplevels(rn))>1)))]),sep="")
reEat1
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
compare
goal
goal = 3500
round(compare[-1]/(compare$calories/goal),0)
macros.needed = round(compare[-1]/(compare$calories/goal),0) - today
macros.needed
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
macros.needed
mc= median(cfc$calories)
mc
ms
ms =  max(2,floor(macroCalories/mc))
ms
macroCalories
macroCalories = macros.needed[,1]
macroCalories
mc= median(cfc$calories)
ms =  max(2,floor(macroCalories/mc))
ms
sets = combn(x=sample(1:nrow(cfc), size= ms+3,rep=T),m= ms-1)
dim(sets)
setMacros = data.frame(matrix(0,nrow(sets),4) )
for(i in 1:ncol(sets)){
test = colSums(cfc[sets[,i],])[-1]
setMacros[i,] = test
}
cfc
cfc
cfc[sample(1:nrow(cfc),nrow(cfc), rep=T,prob=cfc$calories),]
nrow(cfc)
ms =  max(2,floor(macroCalories/mc))
ms
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
foodCompareOut
rm(reEat1)
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
nrow(reEat1)
exists(reEat1)
length(reEat1)
reEat1 = c()
nrow(reEat1)
reEat1 = data.frame()
nrow(reEat1)
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
data.frame(c("Food", "calories", "carbs", "fat", "protein", "fiber"))
df = data.frame(matrix(0, 1, length(names)))
df
names = c("Food", "calories", "carbs", "fat", "protein", "fiber")
df = data.frame(matrix(0, 1, length(names)))
df
df[,1] = "Loading..."
df
namesdf = c("Food", "calories", "carbs", "fat", "protein", "fiber")
df = data.frame(matrix(0, 1, length(namesdf)))
df[,1] = "Loading..."
names(df) = namesdf
df
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
namesdf = c("Food", "calories", "carbs", "fat", "protein", "fiber")
df = data.frame(matrix(0, 1, length(namesdf)))
df[,1] = "Please Enter a Goal..."
names(df) = namesdf
df
df = data.frame(matrix("", 1, length(namesdf)))
df
namesdf = c("Food", "calories", "carbs", "fat", "protein", "fiber")
df = data.frame(matrix("", 1, length(namesdf)))
df[,1] = "Please Enter a Goal..."
names(df) = namesdf
df
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
menu = read.csv("menu.csv")
nrow(menu)
tail(menu)
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
setwd("/Users/Joshua/Desktop/Internet/Internet/MFP2")
source("libraries.R")
runApp(getwd())
?Sys.setenv
Sys.setenv(TZ='PCT')
Sys.Date()
Sys.setenv(TZ='GMT')
Sys.Date()
Sys.timezone()
Sys.getlocale("LC_TIME")
Sys.setenv(TZ= Sys.getlocale("LC_TIME"))
Sys.timezone()
Sys.Date()
Sys.setenv(TZ='PST')
Sys.Date()
Sys.time()
Sys.timezone(location = TRUE)
Sys.timezone(location = TRUE)
Sys.timezone()
str(OlsonNames())
Sys.Date()
Sys.setenv((TZ='PST'))
Sys.setenv(TZ='PST')
Sys.Date()
Sys.setenv(TZ='PDT')
Sys.Date()
Sys.setenv(TZ='GMT-8')
Sys.Date()
Sys.setenv(TZ='Los Angeles')
Sys.Date()
Sys.setenv(TZ='America/Los_Angeles')
Sys.timezone()
Sys.Date()
Sys.timezone(location = TRUE)
